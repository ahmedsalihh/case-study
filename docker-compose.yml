version: '3.7'

services:
  hepsiburada-backend:
    # Configuration for building the docker image for the backend service
    build:
      context: hepsiburada-backend # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment:
      # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/hepsiburada?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: test
      SPRING_DATASOURCE_PASSWORD: test
    networks:
      # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service 
  hepsiburada-frontend:
    build:
      context: hepsiburada-frontend # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080
    ports:
      - "80:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    depends_on:
      - hepsiburada-backend
    networks:
      - frontend

  # Database Service (Mysql)
  db:
    image: mysql:latest
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: hepsiburada
      MYSQL_USER: test
      MYSQL_PASSWORD: test
      MYSQL_ROOT_PASSWORD: mysql
    volumes:
      - ./init-script.sql:/docker-entrypoint-initdb.d/init-script.sql
      - db-data:/var/lib/mysql
    networks:
      - backend

# Volumes
volumes:
  db-data: # Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:
